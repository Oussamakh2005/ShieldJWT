{"version":3,"file":"signToken.js","sourceRoot":"","sources":["../src/signToken.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,QAAQ,CAAC;AACpC,OAAO,gBAAgB,MAAM,uBAAuB,CAAA;AAEpD,MAAM,SAAS,GAAG,CAAC,OAAgB,EAAG,MAAe,EAAG,GAAY,EAAG,SAAS,GAAG,OAAO,EAAE,EAAE;IAC1F,MAAM,MAAM,GAAG;QACX,GAAG,EAAG,SAAS;QACf,IAAI,EAAG,KAAK;KACf,CAAA;IAED,MAAM,aAAa,GAAG,gBAAgB,CAAC,IAAI,CAAC,SAAS,CAAC,MAAM,CAAC,CAAC,CAAC;IAC/D,MAAM,gBAAgB,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,GAAG,EAAE,GAAC,IAAI,CAAC,CAAC,CAAC,iBAAiB;IACvE,MAAM,cAAc,GAAG,gBAAgB,CAAC,IAAI,CAAC,SAAS,CAAC,EAAC,GAAG,OAAO,EAAC,GAAG,EAAE,CAAC,gBAAgB,GAAG,GAAG,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,kCAAkC;IACxI,MAAM,UAAU,GAAG,GAAG,aAAa,IAAI,cAAc,EAAE,CAAC;IACxD,MAAM,SAAS,GAAG,UAAU,CAAC,QAAQ,EAAC,MAAM,CAAC;SAC1B,MAAM,CAAC,UAAU,CAAC;SAClB,MAAM,CAAC,QAAQ,CAAC;SAChB,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC;SACnB,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC;SACnB,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;IACrC,OAAO,GAAG,aAAa,IAAI,cAAc,IAAI,SAAS,EAAE,CAAA;AAC5D,CAAC,CAAA;AAED,eAAe,SAAS,CAAC","sourcesContent":["import { createHmac } from \"crypto\";\nimport base64UrlEncoded from \"./base64urlencoded.js\"\n\nconst signToken = (payload : object , secret : string , exp : number , algorithm = 'HS256') => {\n    const header = {\n        alg : algorithm,\n        type : \"JWT\"\n    }\n\n    const encodedHeader = base64UrlEncoded(JSON.stringify(header));\n    const currentTimeStamp = Math.floor(Date.now()/1000); //time on seconds\n    const encodedPayload = base64UrlEncoded(JSON.stringify({...payload,exp :(currentTimeStamp + exp) })); //note that exp must be on seconds\n    const dataToSign = `${encodedHeader}.${encodedPayload}`;\n    const signature = createHmac('sha256',secret)\n                      .update(dataToSign)\n                      .digest('base64')\n                      .replace(/\\+/g, '-')\n                      .replace(/\\//g, '_')\n                      .replace(/=/g, '');\n    return `${encodedHeader}.${encodedPayload}.${signature}`\n}\n\nexport default signToken;"]}