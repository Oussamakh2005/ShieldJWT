{"version":3,"file":"verifyToken.js","sourceRoot":"","sources":["../src/verifyToken.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,UAAU,EAAE,MAAM,QAAQ,CAAC;AACpC,MAAM,WAAW,GAAG,CAAC,KAAa,EAAE,MAAc,EAAE,EAAE;IAClD,MAAM,CAAC,MAAM,EAAE,OAAO,EAAE,SAAS,CAAC,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;IACtD,MAAM,iBAAiB,GAAG,UAAU,CAAC,QAAQ,EAAE,MAAM,CAAC;SACjD,MAAM,CAAC,GAAG,MAAM,IAAI,OAAO,EAAE,CAAC;SAC9B,MAAM,CAAC,QAAQ,CAAC;SAChB,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC;SACnB,OAAO,CAAC,KAAK,EAAE,GAAG,CAAC;SACnB,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC,CAAC;IACvB,IAAG,SAAS,KAAK,iBAAiB,EAAE,CAAC;QACjC,MAAM,IAAI,KAAK,CAAC,eAAe,CAAC,CAAA;IACpC,CAAC;SAAI,CAAC;QACF,MAAM,cAAc,GAAI,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,EAAC,QAAQ,CAAC,CAAC,QAAQ,EAAE,CAAC,CAAC;QAC7E,IAAG,cAAc,CAAC,GAAG,GAAG,CAAC,IAAI,CAAC,GAAG,EAAE,GAAC,IAAI,CAAC,EAAC,CAAC;YACxC,MAAM,IAAI,KAAK,CAAC,mBAAmB,CAAC,CAAA;QACvC,CAAC;aAAI,CAAC;YACF,OAAO,cAAc,CAAC;QAC1B,CAAC;IACL,CAAC;AACL,CAAC,CAAA;AAED,eAAe,WAAW,CAAC","sourcesContent":["import { createHmac } from \"crypto\";\nconst verifyToken = (input: string, secret: string) => {\n    const [header, payload, signature] = input.split('.');\n    const expectedSignature = createHmac('sha256', secret)\n        .update(`${header}.${payload}`)\n        .digest('base64')\n        .replace(/\\+/g, '-')\n        .replace(/\\//g, '_')\n        .replace(/=/g, '');\n    if(signature !== expectedSignature) {\n        throw new Error(\"Invalid token\")\n    }else{\n        const decodedPayload =  JSON.parse(Buffer.from(payload,'base64').toString());\n        if(decodedPayload.exp < (Date.now()/1000)){\n           throw new Error(\"Token has expired\")\n        }else{\n            return decodedPayload;\n        }\n    }\n} \n\nexport default verifyToken;\n"]}